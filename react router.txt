to use react router library, type in terminal "npm install react-router-dom"

-React Router is a library for the React JavaScript library that enables navigation and routing in a React application.
-It allows you to create single-page web applications (SPAs) that have multiple "pages" without actually needing to refresh the entire page based on URL in the address bars
-React Router provides a set of components that allow you to define how the application should respond to different routes or URL patterns. 
-Some of the key components provided by React Router include:BrowserRouter, HashRouter, Router, Link, Switch

*BrowserRouter:-
we can navigate application pages wihtout refreshing the page based on borwser URL and we connect that browser URL with the help of BrowserRouter
------------------------------------------------

*RouteProvider:-
-In React Router v6, the RouterProvider component replaces the older BrowserRouter as the main entry point for managing your application's routing. It has several key differences and advantages over its predecessor:

-Function:
    -RouterProvider simply wraps your entire application and provides access to the routing information (URL, history, etc.) to all child components, enabling navigation and dynamic content rendering based on the current URL.
    -Unlike BrowserRouter, it doesn't directly manage the browser history itself. This decoupling allows for more flexibility and integrations with other data fetching approaches.

-Data APIs:
    -RouterProvider unlocks several new data APIs in React Router v6, like loaders, actions, and fetchers. These APIs enable you to efficiently fetch data related to the current route and integrate it into your components, resulting in improved data management and performance.
    -While these APIs exist, RouterProvider itself doesn't handle data fetching. You need to define data loaders and other logic separately for each route.

-Usage:
    -You typically need to create a router object first using createBrowserRouter (the recommended router in v6) or other router creation functions. This object defines your application's routes and their associated components.
    -Then, you wrap your entire application, including all components and content, within the RouterProvider component, passing the created router object as a prop.

-Benefits:
    -RouterProvider offers cleaner separation of concerns between routing and data fetching, leading to more modular and maintainable code.
    -The new data APIs enable efficient data loading and integration, improving performance and user experience.
    -Decoupling from the browser history allows for greater flexibility and customization in handling navigation and URL management.

Overall, RouterProvider is the central component for building dynamic and data-driven routing experiences in React Router v6. It enables a more performant and flexible approach to managing your application's navigation and data within the framework.
---------------------------------------------------------------

*Routes and Route:-
Routes: 
-The <Routes> component is a container for defining multiple routes in your application. 
-<Routes> use to to wrap individual <Route> components.
-<Routes> is responsible for rendering the appropriate <Route> based on the current location (path) of the application.
---------------------------------------------------------------------

Route:
-The <Route> component is used to declare a route in your application. It associates a specific path with a corresponding set of components or content to be rendered when that path is matched.
-------------------------------------------------------------------

*Link:-
-The Link component is used to create hyperlinks in your React application, specifically for navigation between different pages or views. It's a key part of client-side routing in React applications. anything we write in Link component that will be clickable
-we use 'Link' in place of 'a' tag because a tag(anchor tag) actually refresh the page and we don't want to refresh the page in react

Link and NavLink difference:
-The Link component is the fundamental building block for navigation in React Router.
-It is a simple component that renders an anchor (<a>) tag with an href attribute pointing to the specified URL.
-Link does not provide any additional styling or functionality for indicating the active link.

-The NavLink component is an extension of Link and provides additional features for styling the active link.
-It automatically adds an "active" class (or a custom class specified by the activeClassName prop) to the link -when the current route matches the link's destination.
-NavLink is useful for styling navigation menus to highlight the active link.
-----------------------------------------------------------------------

*Switch:-
-when we use two different components with same path that time that two components will render at same time so that we use 'Switch' component
-In React Router versions 5 and earlier, Switch serves as a crucial component that ensures only one route is rendered at a time, even when multiple routes match the current URL. 
It works by:
    #Iterating through its children: These are typically Route or Redirect component
    #Stopping at the first match: Once it finds a child route whose path prop matches the current URL, it renders that route's component and ignores any remaining routes.
-Switch do 1. Matching Behavior  2. Preventing Multiple Matches 3. Preventing Multiple Matches
    #Matching Behavior:
    <Switch>
        <Route path="/about" component={About} />
        <Route path="/contact" component={Contact} />
        <Route path="/" component={Home} />
    </Switch>
    If the URL is "/about," the About component will be rendered because it matches the /about path.
    If the URL is "/contact," the Contact component will be rendered.
    If the URL doesn't match either "/about" or "/contact," the Home component will be rendered as it acts as a default or catch-all route.

    #Preventing Multiple Matches:
    <Switch>
        <Route path="/products" component={Products} />
        <Route path="/products/:id" component={ProductDetails} />
        <Route path="/" component={Home} />
    </Switch>
    If the URL is "/products," the Products component will be rendered.
    If the URL is "/products/123," only the ProductDetails component will be rendered, and the Products component will be ignored.
    Without the Switch, both routes would match, and both components would be rendered.

    #Order Matters:
    <Switch>
        <Route path="/profile/edit" component={EditProfile} />
        <Route path="/profile" component={UserProfile} />
        <Route path="/" component={Home} />
    </Switch>
    If the URL is "/profile/edit," the EditProfile component will be rendered because it's the first match.
    If the URL is "/profile," the UserProfile component will be rendered. However, if the order were reversed, and /profile came before /profile/edit, then UserProfile would always match first, and EditProfile would never be rendered.
    The order of routes inside Switch determines which one is considered first.

In each example, Switch ensures that only the first matching route is rendered, demonstrating the matching behavior, preventing multiple matches, and highlighting the importance of the order of routes.
-------------------------------------------------------------------------------------

*useNevigate hook:-
-It is used to navigate to different pages in a React application that uses the React Router for routing.
------------------------------------------------------------

*useParams hook:-
it allow you to access parameter form current route in the functional component. This can we usefull when you need to extract value from the URL  in order to dynamically render on the route parameters
---------------------------------------------------------------

*useSearchParams hook:-
-useSearchParams is a client component hook that lets you read the current URL's query string
-Provides a way to access and modify the query parameters (the part of the URL after the "?" symbol) within React components.
-using searchParams pretty common when you have to apply filters in a listing page. for example on a website like amazon or any ecommerce site you will have a list of parameters on the left hand side selecting a filter will update the URL with a search param. this lets you share the link with others or even the bookmark the link
---------------------------------------------------------

*useLoaderdata hook:-
-Fetches data for a route before rendering its corresponding component.
- this data available within that component and any nested components.

Enhances user experience by:
-Preventing empty states
-Optimizing performance
-Ensuring data availability when need-
--------------------------------------

Active links:-
-The "active link" typically refers to the navigation link that corresponds to the current route or page in a web application. When a user navigates to a specific route, you may want to visually indicate which link in your navigation bar corresponds to the active route. This is often done to provide a clear visual cue to users about their current location within the application.
-For example, if you have a navigation menu with links like Home, About, and Contact, and the user is currently on the "About" page, you might want to visually highlight the "About" link to indicate that it's the active link.
-React Router provides the 'NavLink' component, which allows you to create navigation links with built-in support for styling the active link. The 'activeClassName' prop of 'NavLink' is used to specify a CSS class that will be applied to the link when it is active.
----------------------------------------------------------------

*Nested Route:-
-A nested route in React is a way to organize your application's navigation into a multi-layered structure. It allows you to define routes inside other routes, creating a hierarchy of content that reflects the different sections of your app. This is helpful for building more complex user interfaces where you want to "drill down" into specific data or features.
-----------------------------------------------------------

*Index Route:-
"index route" often refers to the default route or the route that is displayed when the application loads without any specific path provided. It's the route that is matched when the URL path is the root of the application.
OR
Default Child Route. An index route is a special child route that renders when its parent route's URL is matched, but none of the other child routes have specific paths that match.
-----------------------------------------------

*Dynamic route:-
-Dynamic routes refer to routes that are created dynamically based on certain parameters or data. Instead of defining a fixed set of routes in your application, Dynamic routes allow you to generate routes dynamically based on the content or data your application working with.
-when you dealng with a list details patterns or if route parameter can vary in value make use of dynamic routes(specify the url denoted by a colon prefix in the path
---------------------------------------------------------------

*Relative Links:-
-relative link is a link that is specified relative to the current route. Instead of providing an absolute path, you use a relative path to navigate within the current route's context. This is often achieved using the to prop in a Link component.
-For example, if you are at the route "/products" and want to link to "/products/details", you can use a relative link like this:
<Link to="details">Go to Details</Link>
--------------------------------------------------------

*<Outlet />:- 
-outlet component renders the component corresponding to the matching child route from parent's list of routes
-A component that acts as a placeholder for rendering nested routes within a parent route.
-The <Outlet/> component is used within <Root/> to specify where in the view the child element, <Home /> , should be rendered.
-parent component ka child component jaha render karna hai waha outlet component use hota hai
---------------------------------------------------

*Lazy loading route:-
-Lazy loading is technique where component not required on the home page can be split into separate code bundles and downloaded only when the user navigates to that page. you can think of it as incrementally downloading the application it helps reduce initial load time thereby improving performance
------------------------------------------

*Authentication in react:-
-web building web applications, we come across the need to protect some routes in the app from users who are not logged in. for eg, an e-commerce site the product page might be publically accessible whereas the profile page or the order histery page requres that a user be logged in. 
the react router itself does not have a feature to protect routes but you can implement the functionality without much defficulty


what is RouteProvider
what is protect route and how to use